ExpectedGoalsScored = exp(intercept + attack_coef[paste0("AttackTeam", teams)]),
ExpectedGoalsConceded = exp(intercept + defense_coef[paste0("DefendTeam", teams)])
)
ggplot(expected_goals, aes(x = ExpectedGoalsScored, y = ExpectedGoalsConceded, label = Team)) +
geom_point() +
geom_text(nudge_x = 0.1, nudge_y = 0.1) +
labs(x = "Expected Goals Scored", y = "Expected Goals Conceded") +
theme_minimal()
ggplot(expected_goals, aes(x = ExpectedGoalsScored, y = ExpectedGoalsConceded, label = Team)) +
geom_point(color = "steelblue", shape = 16, size = 3) +
geom_text(nudge_x = 0.1, nudge_y = 0.1, size = 4) +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
labs(x = "Expected Goals Scored", y = "Expected Goals Conceded") +
theme_minimal() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
panel.grid.minor = element_blank())
#3.
expected_goals <- data.frame(team = c(Q2.teams$TeamA, Q2.teams$TeamB, Q2.teams$TeamC, Q2.teams$TeamD), expected_scored = NA, expected_conceded = NA)
for (team in expected_goals$team) {
attack_coef_name <- paste("factor(AttackTeam)", team, sep = "")
defend_coef_name <- paste("factor(DefendTeam)", team, sep = "")
if (!is.na(coef(glm_model)[attack_coef_name])) {
expected_goals[expected_goals$team == team, "expected_scored"] <-
exp(coef(glm_model)["(Intercept)"] + coef(glm_model)[attack_coef_name])
}
if (!is.na(coef(glm_model)[defend_coef_name])) {
expected_goals[expected_goals$team == team, "expected_conceded"] <-
exp(coef(glm_model)["(Intercept)"] + coef(glm_model)[defend_coef_name])
}
}
#3.
expected_goals <- data.frame(team = c(Q2.teams$TeamA, Q2.teams$TeamB, Q2.teams$TeamC, Q2.teams$TeamD), expected_scored = NA, expected_conceded = NA)
for (team in expected_goals$team) {
attack_coef_name <- paste("factor(AttackTeam)", team, sep = "")
defend_coef_name <- paste("factor(DefendTeam)", team, sep = "")
if (!is.na(coef(model)[attack_coef_name])) {
expected_goals[expected_goals$team == team, "expected_scored"] <-
exp(coef(model)["(Intercept)"] + coef(model)[attack_coef_name])
}
if (!is.na(coef(model)[defend_coef_name])) {
expected_goals[expected_goals$team == team, "expected_conceded"] <-
exp(coef(model)["(Intercept)"] + coef(model)[defend_coef_name])
}
}
simulate_match <- function(team1, team2) {
goals1 <- rpois(1, expected_goals[expected_goals$team == team1, "expected_scored"])
goals2 <- rpois(1, expected_goals[expected_goals$team == team2, "expected_conceded"])
if (goals1 > goals2) return(team1) else return(team2)
}
simulate_tournament <- function() {
semi_final_1 <- simulate_match(Q2.teams$TeamA, Q2.teams$TeamB)
semi_final_2 <- simulate_match(Q2.teams$TeamC, Q2.teams$TeamD)
final_winner <- simulate_match(semi_final_1, semi_final_2)
return(final_winner)
}
set.seed(123)
results <- replicate(1000, simulate_tournament())
# Set up expected goals data frame
expected_goals <- data.frame(team = c(Q2.teams$TeamA, Q2.teams$TeamB, Q2.teams$TeamC, Q2.teams$TeamD), expected_scored = NA, expected_conceded = NA)
# Populate expected goals
for (team in expected_goals$team) {
attack_coef_name <- paste("factor(AttackTeam)", team, sep = "")
defend_coef_name <- paste("factor(DefendTeam)", team, sep = "")
if (!is.na(coef(model)[attack_coef_name])) {
expected_goals[expected_goals$team == team, "expected_scored"] <-
exp(coef(model)["(Intercept)"] + coef(model)[attack_coef_name])
}
if (!is.na(coef(model)[defend_coef_name])) {
expected_goals[expected_goals$team == team, "expected_conceded"] <-
exp(coef(model)["(Intercept)"] + coef(model)[defend_coef_name])
}
}
# Simulate match function
simulate_match <- function(team1, team2, home_advantage) {
rate1 <- exp(coef(glm_model)["(Intercept)"] + coef(glm_model)[paste("factor(AttackTeam)", team1, sep = "")] +
coef(glm_model)[paste("factor(DefendTeam)", team2, sep = "")] + home_advantage * coef(glm_model)["Home"])
rate2 <- exp(coef(glm_model)["(Intercept)"] + coef(glm_model)[paste("factor(AttackTeam)", team2, sep = "")] +
coef(glm_model)[paste("factor(DefendTeam)", team1, sep = "")])
if (is.na(rate1) || is.na(rate2)) {
print("Warning: Missing coefficients detected. Assigning default rate.")
rate1 <- rate2 <- 1
}
goals1 <- rpois(1, rate1)
goals2 <- rpois(1, rate2)
if (!is.na(goals1) && !is.na(goals2)) {
if (goals1 > goals2) {
return(team1)
} else if (goals2 > goals1) {
return(team2)
} else {
return("draw")
}
} else {
print("Warning: Missing goals data detected. Returning 'draw'.")
return("draw")
}
}
# Handle semi-final match
handle_semi_final <- function(team1, team2) {
home_advantage <- coef(glm_model)["Home"]
result <- simulate_match(team1, team2, home_advantage)
if (result == "draw") {
result <- simulate_match(team2, team1, home_advantage)
}
return(result)
}
# Handle final match
handle_final <- function(team1, team2) {
result <- simulate_match(team1, team2, 0)
while (result == "draw") {
result <- ifelse(runif(1) < 0.5, team1, team2)
}
return(result)
}
# Simulate tournament
simulate_tournament <- function() {
winner_sf1 <- handle_semi_final(teams[1], teams[2])
winner_sf2 <- handle_semi_final(teams[3], teams[4])
final_winner <- handle_final(winner_sf1, winner_sf2)
return(final_winner)
}
# Set seed and run simulation
set.seed(42)
results <- replicate(100, simulate_tournament())
# Set up expected goals data frame
expected_goals <- data.frame(team = c(Q2.teams$TeamA, Q2.teams$TeamB, Q2.teams$TeamC, Q2.teams$TeamD), expected_scored = NA, expected_conceded = NA)
# Populate expected goals
for (team in expected_goals$team) {
attack_coef_name <- paste("factor(AttackTeam)", team, sep = "")
defend_coef_name <- paste("factor(DefendTeam)", team, sep = "")
if (!is.na(coef(model)[attack_coef_name])) {
expected_goals[expected_goals$team == team, "expected_scored"] <-
exp(coef(model)["(Intercept)"] + coef(model)[attack_coef_name])
}
if (!is.na(coef(model)[defend_coef_name])) {
expected_goals[expected_goals$team == team, "expected_conceded"] <-
exp(coef(model)["(Intercept)"] + coef(model)[defend_coef_name])
}
}
# Simulate match function
simulate_match <- function(team1, team2, home_advantage) {
rate1 <- exp(coef(model)["(Intercept)"] + coef(glm_model)[paste("factor(AttackTeam)", team1, sep = "")] +
coef(model)[paste("factor(DefendTeam)", team2, sep = "")] + home_advantage * coef(glm_model)["Home"])
rate2 <- exp(coef(model)["(Intercept)"] + coef(glm_model)[paste("factor(AttackTeam)", team2, sep = "")] +
coef(model)[paste("factor(DefendTeam)", team1, sep = "")])
if (is.na(rate1) || is.na(rate2)) {
print("Warning: Missing coefficients detected. Assigning default rate.")
rate1 <- rate2 <- 1
}
goals1 <- rpois(1, rate1)
goals2 <- rpois(1, rate2)
if (!is.na(goals1) && !is.na(goals2)) {
if (goals1 > goals2) {
return(team1)
} else if (goals2 > goals1) {
return(team2)
} else {
return("draw")
}
} else {
print("Warning: Missing goals data detected. Returning 'draw'.")
return("draw")
}
}
# Handle semi-final match
handle_semi_final <- function(team1, team2) {
home_advantage <- coef(glm_model)["Home"]
result <- simulate_match(team1, team2, home_advantage)
if (result == "draw") {
result <- simulate_match(team2, team1, home_advantage)
}
return(result)
}
# Handle final match
handle_final <- function(team1, team2) {
result <- simulate_match(team1, team2, 0)
while (result == "draw") {
result <- ifelse(runif(1) < 0.5, team1, team2)
}
return(result)
}
# Simulate tournament
simulate_tournament <- function() {
winner_sf1 <- handle_semi_final(teams[1], teams[2])
winner_sf2 <- handle_semi_final(teams[3], teams[4])
final_winner <- handle_final(winner_sf1, winner_sf2)
return(final_winner)
}
# Set seed and run simulation
set.seed(42)
results <- replicate(100, simulate_tournament())
# Set up expected goals data frame
expected_goals <- data.frame(team = c(Q2.teams$TeamA, Q2.teams$TeamB, Q2.teams$TeamC, Q2.teams$TeamD), expected_scored = NA, expected_conceded = NA)
# Populate expected goals
for (team in expected_goals$team) {
attack_coef_name <- paste("factor(AttackTeam)", team, sep = "")
defend_coef_name <- paste("factor(DefendTeam)", team, sep = "")
if (!is.na(coef(model)[attack_coef_name])) {
expected_goals[expected_goals$team == team, "expected_scored"] <-
exp(coef(model)["(Intercept)"] + coef(model)[attack_coef_name])
}
if (!is.na(coef(model)[defend_coef_name])) {
expected_goals[expected_goals$team == team, "expected_conceded"] <-
exp(coef(model)["(Intercept)"] + coef(model)[defend_coef_name])
}
}
# Simulate match function
simulate_match <- function(team1, team2, home_advantage) {
rate1 <- exp(coef(model)["(Intercept)"] + coef(glm_model)[paste("factor(AttackTeam)", team1, sep = "")] +
coef(model)[paste("factor(DefendTeam)", team2, sep = "")] + home_advantage * coef(glm_model)["Home"])
rate2 <- exp(coef(model)["(Intercept)"] + coef(glm_model)[paste("factor(AttackTeam)", team2, sep = "")] +
coef(model)[paste("factor(DefendTeam)", team1, sep = "")])
if (is.na(rate1) || is.na(rate2)) {
print("Warning: Missing coefficients detected. Assigning default rate.")
rate1 <- rate2 <- 1
}
goals1 <- rpois(1, rate1)
goals2 <- rpois(1, rate2)
if (!is.na(goals1) && !is.na(goals2)) {
if (goals1 > goals2) {
return(team1)
} else if (goals2 > goals1) {
return(team2)
} else {
return("draw")
}
} else {
print("Warning: Missing goals data detected. Returning 'draw'.")
return("draw")
}
}
# Handle semi-final match
handle_semi_final <- function(team1, team2) {
home_advantage <- coef(model)["Home"]
result <- simulate_match(team1, team2, home_advantage)
if (result == "draw") {
result <- simulate_match(team2, team1, home_advantage)
}
return(result)
}
# Handle final match
handle_final <- function(team1, team2) {
result <- simulate_match(team1, team2, 0)
while (result == "draw") {
result <- ifelse(runif(1) < 0.5, team1, team2)
}
return(result)
}
# Simulate tournament
simulate_tournament <- function() {
winner_sf1 <- handle_semi_final(teams[1], teams[2])
winner_sf2 <- handle_semi_final(teams[3], teams[4])
final_winner <- handle_final(winner_sf1, winner_sf2)
return(final_winner)
}
# Set seed and run simulation
set.seed(42)
results <- replicate(100, simulate_tournament())
# Set up expected goals data frame
expected_goals <- data.frame(team = c(Q2.teams$TeamA, Q2.teams$TeamB, Q2.teams$TeamC, Q2.teams$TeamD), expected_scored = NA, expected_conceded = NA)
# Populate expected goals
for (team in expected_goals$team) {
attack_coef_name <- paste("factor(AttackTeam)", team, sep = "")
defend_coef_name <- paste("factor(DefendTeam)", team, sep = "")
if (!is.na(coef(model)[attack_coef_name])) {
expected_goals[expected_goals$team == team, "expected_scored"] <-
exp(coef(model)["(Intercept)"] + coef(model)[attack_coef_name])
}
if (!is.na(coef(model)[defend_coef_name])) {
expected_goals[expected_goals$team == team, "expected_conceded"] <-
exp(coef(model)["(Intercept)"] + coef(model)[defend_coef_name])
}
}
# Simulate match function
simulate_match <- function(team1, team2, home_advantage) {
rate1 <- exp(coef(model)["(Intercept)"] + coef(glm_model)[paste("factor(AttackTeam)", team1, sep = "")] +
coef(model)[paste("factor(DefendTeam)", team2, sep = "")] + home_advantage * coef(model)["Home"])
rate2 <- exp(coef(model)["(Intercept)"] + coef(glm_model)[paste("factor(AttackTeam)", team2, sep = "")] +
coef(model)[paste("factor(DefendTeam)", team1, sep = "")])
if (is.na(rate1) || is.na(rate2)) {
print("Warning: Missing coefficients detected. Assigning default rate.")
rate1 <- rate2 <- 1
}
goals1 <- rpois(1, rate1)
goals2 <- rpois(1, rate2)
if (!is.na(goals1) && !is.na(goals2)) {
if (goals1 > goals2) {
return(team1)
} else if (goals2 > goals1) {
return(team2)
} else {
return("draw")
}
} else {
print("Warning: Missing goals data detected. Returning 'draw'.")
return("draw")
}
}
# Handle semi-final match
handle_semi_final <- function(team1, team2) {
home_advantage <- coef(model)["Home"]
result <- simulate_match(team1, team2, home_advantage)
if (result == "draw") {
result <- simulate_match(team2, team1, home_advantage)
}
return(result)
}
# Handle final match
handle_final <- function(team1, team2) {
result <- simulate_match(team1, team2, 0)
while (result == "draw") {
result <- ifelse(runif(1) < 0.5, team1, team2)
}
return(result)
}
# Simulate tournament
simulate_tournament <- function() {
winner_sf1 <- handle_semi_final(teams[1], teams[2])
winner_sf2 <- handle_semi_final(teams[3], teams[4])
final_winner <- handle_final(winner_sf1, winner_sf2)
return(final_winner)
}
# Set seed and run simulation
set.seed(42)
results <- replicate(100, simulate_tournament())
# Set up expected goals data frame
expected_goals <- data.frame(team = c(Q2.teams$TeamA, Q2.teams$TeamB, Q2.teams$TeamC, Q2.teams$TeamD), expected_scored = NA, expected_conceded = NA)
# Populate expected goals
for (team in expected_goals$team) {
attack_coef_name <- paste("factor(AttackTeam)", team, sep = "")
defend_coef_name <- paste("factor(DefendTeam)", team, sep = "")
if (!is.na(coef(model)[attack_coef_name])) {
expected_goals[expected_goals$team == team, "expected_scored"] <-
exp(coef(model)["(Intercept)"] + coef(model)[attack_coef_name])
}
if (!is.na(coef(model)[defend_coef_name])) {
expected_goals[expected_goals$team == team, "expected_conceded"] <-
exp(coef(model)["(Intercept)"] + coef(model)[defend_coef_name])
}
}
# Simulate match function
simulate_match <- function(team1, team2, home_advantage) {
rate1 <- exp(coef(model)["(Intercept)"] + coef(model)[paste("factor(AttackTeam)", team1, sep = "")] +
coef(model)[paste("factor(DefendTeam)", team2, sep = "")] + home_advantage * coef(model)["Home"])
rate2 <- exp(coef(model)["(Intercept)"] + coef(model)[paste("factor(AttackTeam)", team2, sep = "")] +
coef(model)[paste("factor(DefendTeam)", team1, sep = "")])
if (is.na(rate1) || is.na(rate2)) {
print("Warning: Missing coefficients detected. Assigning default rate.")
rate1 <- rate2 <- 1
}
goals1 <- rpois(1, rate1)
goals2 <- rpois(1, rate2)
if (!is.na(goals1) && !is.na(goals2)) {
if (goals1 > goals2) {
return(team1)
} else if (goals2 > goals1) {
return(team2)
} else {
return("draw")
}
} else {
print("Warning: Missing goals data detected. Returning 'draw'.")
return("draw")
}
}
# Handle semi-final match
handle_semi_final <- function(team1, team2) {
home_advantage <- coef(model)["Home"]
result <- simulate_match(team1, team2, home_advantage)
if (result == "draw") {
result <- simulate_match(team2, team1, home_advantage)
}
return(result)
}
# Handle final match
handle_final <- function(team1, team2) {
result <- simulate_match(team1, team2, 0)
while (result == "draw") {
result <- ifelse(runif(1) < 0.5, team1, team2)
}
return(result)
}
# Simulate tournament
simulate_tournament <- function() {
winner_sf1 <- handle_semi_final(teams[1], teams[2])
winner_sf2 <- handle_semi_final(teams[3], teams[4])
final_winner <- handle_final(winner_sf1, winner_sf2)
return(final_winner)
}
# Set seed and run simulation
set.seed(42)
results <- replicate(100, simulate_tournament())
table(results) / 100
library(tidyverse)
install.packages("tidyverse", "lubridate")
library(tidyverse)
library(lubridate)
# 读取数据
df <- read.csv('FinalData_cleaned.csv')
#install.packages("tidyverse", "lubridate")
library(tidyverse)
library(lubridate)
# 读取数据
df <- read.csv('E:/Pitts/capstone/FinalData_cleaned.csv')
# 转换日期格式
df$BillDate <- as.Date(df$BillDate)
# 按月分组并计算总工时
total_monthly_hours <- df %>%
mutate(month = floor_date(BillDate, "month")) %>%
group_by(month) %>%
summarise(total_hours = sum(Hours))
# 计算每月的 utilization rate
excluded_monthly_hours <- excluded_df %>%
mutate(month = floor_date(BillDate, "month")) %>%
group_by(month) %>%
summarise(excluded_hours = sum(Hours))
#install.packages("tidyverse", "lubridate")
library(tidyverse)
library(lubridate)
# 读取数据
df <- read.csv('E:/Pitts/capstone/FinalData_cleaned.csv')
# 转换日期格式
df$BillDate <- as.Date(df$BillDate)
# 按月分组并计算总工时
total_monthly_hours <- df %>%
mutate(month = floor_date(BillDate, "month")) %>%
group_by(month) %>%
summarise(total_hours = sum(Hours))
# 从原数据框中筛选出符合条件的行
excluded_df <- df %>%
filter(TaskName %in% c('PTO', 'Birthday', 'Company Holiday', 'Parental leave'))
billable_df <- df %>%
filter(IsBillable == 1)
# 将筛选后的数据框中的日期转换为日期时间格式
excluded_df$BillDate <- as.POSIXct(excluded_df$BillDate)
billable_df$BillDate <- as.POSIXct(billable_df$BillDate)
# 计算每月的 utilization rate
excluded_monthly_hours <- excluded_df %>%
mutate(month = floor_date(BillDate, "month")) %>%
group_by(month) %>%
summarise(excluded_hours = sum(Hours))
billable_monthly_hours <- billable_df %>%
mutate(month = floor_date(BillDate, "month")) %>%
group_by(month) %>%
summarise(billable_hours = sum(Hours))
utilization_rate_per_month <- left_join(total_monthly_hours, excluded_monthly_hours, by = "month") %>%
left_join(., billable_monthly_hours, by = "month") %>%
mutate(utilization_rate = billable_hours / (total_hours - excluded_hours))
# 可视化每月的 utilization rate
utilization_rate_per_month %>%
ggplot(aes(x = month, y = utilization_rate)) +
geom_line(color = '#2E8B57', size = 1) +
geom_point(color = '#2E8B57', size = 3) +
theme_minimal() +
labs(title = "Utilization Rate per Month",
x = "Month",
y = "Utilization Rate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#install.packages("tidyverse", "lubridate")
library(tidyverse)
library(lubridate)
# 读取数据
df <- read.csv('E:/Pitts/capstone/FinalData_cleaned.csv')
# 转换日期格式
df$BillDate <- as.Date(df$BillDate)
# 按月分组并计算总工时
total_monthly_hours <- df %>%
mutate(month = floor_date(BillDate, "month")) %>%
group_by(month) %>%
summarise(total_hours = sum(Hours))
# 从原数据框中筛选出符合条件的行
excluded_df <- df %>%
filter(TaskName %in% c('PTO', 'Birthday', 'Company Holiday', 'Parental leave'))
billable_df <- df %>%
filter(IsBillable == 1)
# 将筛选后的数据框中的日期转换为日期时间格式
excluded_df$BillDate <- as.POSIXct(excluded_df$BillDate)
billable_df$BillDate <- as.POSIXct(billable_df$BillDate)
# 计算每月的 utilization rate
excluded_monthly_hours <- excluded_df %>%
mutate(month = floor_date(BillDate, "month")) %>%
group_by(month) %>%
summarise(excluded_hours = sum(Hours))
billable_monthly_hours <- billable_df %>%
mutate(month = floor_date(BillDate, "month")) %>%
group_by(month) %>%
summarise(billable_hours = sum(Hours))
utilization_rate_per_month <- left_join(total_monthly_hours, excluded_monthly_hours, by = "month") %>%
left_join(., billable_monthly_hours, by = "month") %>%
mutate(utilization_rate = billable_hours / (total_hours - excluded_hours))
# 设置图形大小
options(repr.plot.width=10, repr.plot.height=6)
# 绘制折线图
plot(utilization_rate_per_month$month, utilization_rate_per_month$utilization_rate, type='o', ylim=c(0, 1), xlab='Month', ylab='Utilization Rate', main='Monthly Utilization Rate')
# 添加网格线
grid()
# 旋转 x 轴标签以避免重叠
axis(1, at=utilization_rate_per_month$month, labels=format(utilization_rate_per_month$month, "%Y-%m"), las=2)
# 显示图形
# 可视化每月的 utilization rate
utilization_rate_per_month %>%
ggplot(aes(x = month, y = utilization_rate)) +
geom_line(color = '#2E8B57', size = 1) +
geom_point(color = '#2E8B57', size = 3) +
theme_minimal() +
labs(title = "Utilization Rate per Month",
x = "Month",
y = "Utilization Rate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 将日期转换为日期时间格式
billable_df$BillDate <- as.POSIXct(df$BillDate)
